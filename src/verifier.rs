use near_groth16_verifier::{self, G1Point, G2Point, Verifier};
use near_bigint::U256;

pub fn get_verifier()-> Verifier{
    let alfa1 = G1Point{
        x: U256::from_dec_str("20491192805390485299153009773594534940189261866228447918068658471970481763042").unwrap(),
        y: U256::from_dec_str("9383485363053290200918347156157836566562967994039712273449902621266178545958").unwrap()
    };
    let beta2 = G2Point {
        x:[
            U256::from_dec_str("4252822878758300859123897981450591353533073413197771768651442665752259397132").unwrap(),
            U256::from_dec_str("6375614351688725206403948262868962793625744043794305715222011528459656738731").unwrap()
        ],
        y:[
            U256::from_dec_str("21847035105528745403288232691147584728191162732299865338377159692350059136679").unwrap(),
            U256::from_dec_str("10505242626370262277552901082094356697409835680220590971873171140371331206856").unwrap()
        ]
    };
    let gamma2 = G2Point {
        x:[
            U256::from_dec_str("11559732032986387107991004021392285783925812861821192530917403151452391805634").unwrap(),
            U256::from_dec_str("10857046999023057135944570762232829481370756359578518086990519993285655852781").unwrap()
        ],
        y:[
            U256::from_dec_str("4082367875863433681332203403145435568316851327593401208105741076214120093531").unwrap(),
            U256::from_dec_str("8495653923123431417604973247489272438418190587263600148770280649306958101930").unwrap()
        ]
    };
    let delta2 = G2Point {
        x:[
            U256::from_dec_str("20637939757332191985219466750514112514830176492003070298908178796582256423445").unwrap(),
            U256::from_dec_str("21015870987554935578856562994563796394452175083269944606559673949460277152483").unwrap()
        ],
        y:[
            U256::from_dec_str("7308971620370004609743038871778988943972318366181842608509263947408591078846").unwrap(),
            U256::from_dec_str("19578762133483017273429849028797807252406479590275449312036317638112265649126").unwrap()
        ]
    };
    let ic = vec![
        G1Point{
            x: U256::from_dec_str("4595639739788529313135927846153489513260052783364743523344328896305419933627").unwrap(),
            y: U256::from_dec_str("13577843718844184042346095806470311065274840502864234728407198439361979518223").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("19125733112813331880180112762042920784001527126678496097978721184513458499861").unwrap(),
            y: U256::from_dec_str("470495054354753477176064253439657941845200056447070007550476843795069859530").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("9798632009143333403145042225641105799474060066926099950339875153142594918323").unwrap(),
            y: U256::from_dec_str("15467851970301286525906423722646678659414362276892586739627188622113917076355").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("4677856832410602822119633312864839150180396112709578634305606190993420950086").unwrap(),
            y: U256::from_dec_str("21413789555508871663216491538642005537595601774930793267108872091881334409985").unwrap()
        },
        G1Point{
            x: U256::from_dec_str("17622463197037705164686879153818888337611670039316323149958751021262085916949").unwrap(),
            y: U256::from_dec_str("10546326028888365743245970980969672597991412490319907398941581639510925080455").unwrap()
        }
    ];
    let new_verifier = Verifier::new(alfa1, beta2, gamma2, delta2, ic);

    new_verifier
}